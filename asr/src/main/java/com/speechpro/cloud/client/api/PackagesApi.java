/*
 * ASR documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.1.58
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.speechpro.cloud.client.api;

import com.google.gson.reflect.TypeToken;
import com.speechpro.cloud.client.*;
import com.speechpro.cloud.client.model.PackageDto;
import com.speechpro.cloud.client.model.StatusDto;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.*;

public class PackagesApi {
    private ApiClient apiClient;

    public PackagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PackagesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAvailablePackages
     * @param xSessionId Session identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAvailablePackagesCall(UUID xSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vkasr/rest/v1/packages/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAvailablePackagesValidateBeforeCall(UUID xSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling getAvailablePackages(Async)");
        }
        

        com.squareup.okhttp.Call call = getAvailablePackagesCall(xSessionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all available packages
     * 
     * @param xSessionId Session identifier (required)
     * @return List&lt;PackageDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PackageDto> getAvailablePackages(UUID xSessionId) throws ApiException {
        ApiResponse<List<PackageDto>> resp = getAvailablePackagesWithHttpInfo(xSessionId);
        return resp.getData();
    }

    /**—Å
     * Get all available packages
     * 
     * @param xSessionId Session identifier (required)
     * @return com.speechpro.cloud.client.ApiResponse&lt;List&lt;PackageDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PackageDto>> getAvailablePackagesWithHttpInfo(UUID xSessionId) throws ApiException {
        com.squareup.okhttp.Call call = getAvailablePackagesValidateBeforeCall(xSessionId, null, null);
        Type localVarReturnType = new TypeToken<List<PackageDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all available packages (asynchronously)
     * 
     * @param xSessionId Session identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAvailablePackagesAsync(UUID xSessionId, final ApiCallback<List<PackageDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAvailablePackagesValidateBeforeCall(xSessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PackageDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for load
     * @param xSessionId Session identifier (required)
     * @param packageId Package name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loadCall(UUID xSessionId, String packageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vkasr/rest/v1/packages/{packageId}/load"
            .replaceAll("\\{" + "packageId" + "\\}", apiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loadValidateBeforeCall(UUID xSessionId, String packageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling load(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling load(Async)");
        }
        

        com.squareup.okhttp.Call call = loadCall(xSessionId, packageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Load package
     * 
     * @param xSessionId Session identifier (required)
     * @param packageId Package name (required)
     * @return StatusDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusDto load(UUID xSessionId, String packageId) throws ApiException {
        ApiResponse<StatusDto> resp = loadWithHttpInfo(xSessionId, packageId);
        return resp.getData();
    }

    /**
     * Load package
     * 
     * @param xSessionId Session identifier (required)
     * @param packageId Package name (required)
     * @return com.speechpro.cloud.client.ApiResponse&lt;StatusDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusDto> loadWithHttpInfo(UUID xSessionId, String packageId) throws ApiException {
        com.squareup.okhttp.Call call = loadValidateBeforeCall(xSessionId, packageId, null, null);
        Type localVarReturnType = new TypeToken<StatusDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Load package (asynchronously)
     * 
     * @param xSessionId Session identifier (required)
     * @param packageId Package name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loadAsync(UUID xSessionId, String packageId, final ApiCallback<StatusDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loadValidateBeforeCall(xSessionId, packageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unload
     * @param xSessionId Session identifier (required)
     * @param packageId Package name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unloadCall(UUID xSessionId, String packageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vkasr/rest/v1/packages/{packageId}/unload"
            .replaceAll("\\{" + "packageId" + "\\}", apiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unloadValidateBeforeCall(UUID xSessionId, String packageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling unload(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling unload(Async)");
        }
        

        com.squareup.okhttp.Call call = unloadCall(xSessionId, packageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unload package
     * 
     * @param xSessionId Session identifier (required)
     * @param packageId Package name (required)
     * @return StatusDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusDto unload(UUID xSessionId, String packageId) throws ApiException {
        ApiResponse<StatusDto> resp = unloadWithHttpInfo(xSessionId, packageId);
        return resp.getData();
    }

    /**
     * Unload package
     * 
     * @param xSessionId Session identifier (required)
     * @param packageId Package name (required)
     * @return com.speechpro.cloud.client.ApiResponse&lt;StatusDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusDto> unloadWithHttpInfo(UUID xSessionId, String packageId) throws ApiException {
        com.squareup.okhttp.Call call = unloadValidateBeforeCall(xSessionId, packageId, null, null);
        Type localVarReturnType = new TypeToken<StatusDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unload package (asynchronously)
     * 
     * @param xSessionId Session identifier (required)
     * @param packageId Package name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unloadAsync(UUID xSessionId, String packageId, final ApiCallback<StatusDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unloadValidateBeforeCall(xSessionId, packageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
