/*
 * ASR documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.1.58
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.speechpro.cloud.client.api;

import com.google.gson.reflect.TypeToken;
import com.speechpro.cloud.client.*;
import com.speechpro.cloud.client.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.*;

public class RecognizeApi {
    private ApiClient apiClient;

    public RecognizeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecognizeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for close
     * @param xSessionId Session identifier (required)
     * @param xTransactionId Session identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call closeCall(UUID xSessionId, UUID xTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vkasr/rest/v1/recognize/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));
        if (xTransactionId != null)
        localVarHeaderParams.put("X-Transaction-Id", apiClient.parameterToString(xTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call closeValidateBeforeCall(UUID xSessionId, UUID xTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling close(Async)");
        }
        
        // verify the required parameter 'xTransactionId' is set
        if (xTransactionId == null) {
            throw new ApiException("Missing the required parameter 'xTransactionId' when calling close(Async)");
        }
        

        com.squareup.okhttp.Call call = closeCall(xSessionId, xTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Close transaction
     * 
     * @param xSessionId Session identifier (required)
     * @param xTransactionId Session identifier (required)
     * @return ASRResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ASRResultDto close(UUID xSessionId, UUID xTransactionId) throws ApiException {
        ApiResponse<ASRResultDto> resp = closeWithHttpInfo(xSessionId, xTransactionId);
        return resp.getData();
    }

    /**
     * Close transaction
     * 
     * @param xSessionId Session identifier (required)
     * @param xTransactionId Session identifier (required)
     * @return com.speechpro.cloud.client.ApiResponse&lt;ASRResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ASRResultDto> closeWithHttpInfo(UUID xSessionId, UUID xTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = closeValidateBeforeCall(xSessionId, xTransactionId, null, null);
        Type localVarReturnType = new TypeToken<ASRResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Close transaction (asynchronously)
     * 
     * @param xSessionId Session identifier (required)
     * @param xTransactionId Session identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call closeAsync(UUID xSessionId, UUID xTransactionId, final ApiCallback<ASRResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = closeValidateBeforeCall(xSessionId, xTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ASRResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recognize
     * @param xSessionId Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recognizeCall(UUID xSessionId, RecognitionRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vkasr/rest/v1/recognize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recognizeValidateBeforeCall(UUID xSessionId, RecognitionRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling recognize(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling recognize(Async)");
        }
        

        com.squareup.okhttp.Call call = recognizeCall(xSessionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get speech recognition result
     * 
     * @param xSessionId Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @return ASRResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ASRResultDto recognize(UUID xSessionId, RecognitionRequestDto body) throws ApiException {
        ApiResponse<ASRResultDto> resp = recognizeWithHttpInfo(xSessionId, body);
        return resp.getData();
    }

    /**
     * Get speech recognition result
     * 
     * @param xSessionId Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @return com.speechpro.cloud.client.ApiResponse&lt;ASRResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ASRResultDto> recognizeWithHttpInfo(UUID xSessionId, RecognitionRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = recognizeValidateBeforeCall(xSessionId, body, null, null);
        Type localVarReturnType = new TypeToken<ASRResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get speech recognition result (asynchronously)
     * 
     * @param xSessionId Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recognizeAsync(UUID xSessionId, RecognitionRequestDto body, final ApiCallback<ASRResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recognizeValidateBeforeCall(xSessionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ASRResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for recognizeAdvanced
     * @param xSessionID Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @param xRequestId Request identifier (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recognizeAdvancedCall(UUID xSessionID, AdvancedRecognitionRequestDto body, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vkasr/rest/v1/recognize/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionID != null)
            localVarHeaderParams.put("X-Session-ID", apiClient.parameterToString(xSessionID));
        if (xRequestId != null)
            localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recognizeAdvancedValidateBeforeCall(UUID xSessionID, AdvancedRecognitionRequestDto body, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'xSessionID' is set
        if (xSessionID == null) {
            throw new ApiException("Missing the required parameter 'xSessionID' when calling recognizeAdvanced(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling recognizeAdvanced(Async)");
        }


        com.squareup.okhttp.Call call = recognizeAdvancedCall(xSessionID, body, xRequestId, progressListener, progressRequestListener);
        return call;

    }


    /**
     * Recognize speech with advanced options
     *
     * @param xSessionID Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @param xRequestId Request identifier (optional)
     * @return List&lt;ASRAdvancedResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ASRAdvancedResultDto> recognizeAdvanced(UUID xSessionID, AdvancedRecognitionRequestDto body, String xRequestId) throws ApiException {
        ApiResponse<List<ASRAdvancedResultDto>> resp = recognizeAdvancedWithHttpInfo(xSessionID, body, xRequestId);
        return resp.getData();
    }

    /**
     * Recognize speech with advanced options
     *
     * @param xSessionID Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @param xRequestId Request identifier (optional)
     * @return ApiResponse&lt;List&lt;ASRAdvancedResultDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ASRAdvancedResultDto>> recognizeAdvancedWithHttpInfo(UUID xSessionID, AdvancedRecognitionRequestDto body, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = recognizeAdvancedValidateBeforeCall(xSessionID, body, xRequestId, null, null);
        Type localVarReturnType = new TypeToken<List<ASRAdvancedResultDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Recognize speech with advanced options (asynchronously)
     *
     * @param xSessionID Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @param xRequestId Request identifier (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recognizeAdvancedAsync(UUID xSessionID, AdvancedRecognitionRequestDto body, String xRequestId, final ApiCallback<List<ASRAdvancedResultDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recognizeAdvancedValidateBeforeCall(xSessionID, body, xRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ASRAdvancedResultDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for recognizeSessionless
     * @param body Request with user login data and recognition request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recognizeSessionlessCall(SessionlessRecognitionRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vkasr/rest/v1/recognize/sessionless";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recognizeSessionlessValidateBeforeCall(SessionlessRecognitionRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling recognizeSessionless(Async)");
        }
        

        com.squareup.okhttp.Call call = recognizeSessionlessCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get speech recognition result
     * 
     * @param body Request with user login data and recognition request (required)
     * @return ASRResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ASRResultDto recognizeSessionless(SessionlessRecognitionRequestDto body) throws ApiException {
        ApiResponse<ASRResultDto> resp = recognizeSessionlessWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Get speech recognition result
     * 
     * @param body Request with user login data and recognition request (required)
     * @return com.speechpro.cloud.client.ApiResponse&lt;ASRResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ASRResultDto> recognizeSessionlessWithHttpInfo(SessionlessRecognitionRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = recognizeSessionlessValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ASRResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get speech recognition result (asynchronously)
     * 
     * @param body Request with user login data and recognition request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recognizeSessionlessAsync(SessionlessRecognitionRequestDto body, final ApiCallback<ASRResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recognizeSessionlessValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ASRResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recognizeWords
     * @param xSessionId Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recognizeWordsCall(UUID xSessionId, RecognitionRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vkasr/rest/v1/recognize/words";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recognizeWordsValidateBeforeCall(UUID xSessionId, RecognitionRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling recognizeWords(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling recognizeWords(Async)");
        }
        

        com.squareup.okhttp.Call call = recognizeWordsCall(xSessionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Recognize speech and return word list
     * 
     * @param xSessionId Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @return List&lt;WordDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WordDto> recognizeWords(UUID xSessionId, RecognitionRequestDto body) throws ApiException {
        ApiResponse<List<WordDto>> resp = recognizeWordsWithHttpInfo(xSessionId, body);
        return resp.getData();
    }

    /**
     * Recognize speech and return word list
     * 
     * @param xSessionId Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @return com.speechpro.cloud.client.ApiResponse&lt;List&lt;WordDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WordDto>> recognizeWordsWithHttpInfo(UUID xSessionId, RecognitionRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = recognizeWordsValidateBeforeCall(xSessionId, body, null, null);
        Type localVarReturnType = new TypeToken<List<WordDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Recognize speech and return word list (asynchronously)
     * 
     * @param xSessionId Session identifier (required)
     * @param body Recognition request with audio file, mime type and package ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recognizeWordsAsync(UUID xSessionId, RecognitionRequestDto body, final ApiCallback<List<WordDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recognizeWordsValidateBeforeCall(xSessionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WordDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recognizeWordsSessionless
     * @param body Request with user login data and recognition request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recognizeWordsSessionlessCall(SessionlessRecognitionRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vkasr/rest/v1/recognize/sessionless/words";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recognizeWordsSessionlessValidateBeforeCall(SessionlessRecognitionRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling recognizeWordsSessionless(Async)");
        }
        

        com.squareup.okhttp.Call call = recognizeWordsSessionlessCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Recognize speech without session and return word list
     * 
     * @param body Request with user login data and recognition request (required)
     * @return List&lt;WordDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WordDto> recognizeWordsSessionless(SessionlessRecognitionRequestDto body) throws ApiException {
        ApiResponse<List<WordDto>> resp = recognizeWordsSessionlessWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Recognize speech without session and return word list
     * 
     * @param body Request with user login data and recognition request (required)
     * @return com.speechpro.cloud.client.ApiResponse&lt;List&lt;WordDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WordDto>> recognizeWordsSessionlessWithHttpInfo(SessionlessRecognitionRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = recognizeWordsSessionlessValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<WordDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Recognize speech without session and return word list (asynchronously)
     * 
     * @param body Request with user login data and recognition request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recognizeWordsSessionlessAsync(SessionlessRecognitionRequestDto body, final ApiCallback<List<WordDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recognizeWordsSessionlessValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WordDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for start
     * @param xSessionId Session identifier (required)
     * @param body Transaction parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startCall(UUID xSessionId, StreamRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vkasr/rest/v1/recognize/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startValidateBeforeCall(UUID xSessionId, StreamRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling start(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling start(Async)");
        }
        

        com.squareup.okhttp.Call call = startCall(xSessionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start recognition stream
     * 
     * @param xSessionId Session identifier (required)
     * @param body Transaction parameters (required)
     * @return WebSocketServerConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebSocketServerConfiguration start(UUID xSessionId, StreamRequestDto body) throws ApiException {
        ApiResponse<WebSocketServerConfiguration> resp = startWithHttpInfo(xSessionId, body);
        return resp.getData();
    }

    /**
     * Start recognition stream
     * 
     * @param xSessionId Session identifier (required)
     * @param body Transaction parameters (required)
     * @return com.speechpro.cloud.client.ApiResponse&lt;WebSocketServerConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebSocketServerConfiguration> startWithHttpInfo(UUID xSessionId, StreamRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = startValidateBeforeCall(xSessionId, body, null, null);
        Type localVarReturnType = new TypeToken<WebSocketServerConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start recognition stream (asynchronously)
     * 
     * @param xSessionId Session identifier (required)
     * @param body Transaction parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startAsync(UUID xSessionId, StreamRequestDto body, final ApiCallback<WebSocketServerConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startValidateBeforeCall(xSessionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebSocketServerConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
